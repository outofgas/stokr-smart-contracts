pragma solidity 0.4.19;

import "./MintableToken.sol";
import "./KeyRecoverable.sol";


/// @title HarvestToken
/// @author Autogenerated from a Dia UML diagram
contract HarvestToken is MintableToken, KeyRecoverable {

    mapping(address => mapping(address => uint)) public allowances;

    /// @dev Constructor
    /// @param _whitelist An Ethereum address
    /// @param _keyRecoverer An Ethereum address
    function HarvestToken(address _whitelist, address _keyRecoverer)
        public
        KeyRecoverable(_keyRecoverer)
        Whitelisted(_whitelist)
    {}

    /// @dev Recover key
    /// @param _oldAddress An Ethereum address
    /// @param _newAddress An Ethereum address
    function recoverKey(address _oldAddress, address _newAddress)
        public
        onlyKeyRecoverer
        onlyWhitelisted(_oldAddress)
        onlyWhitelisted(_newAddress)
    {
        // Ensure that new address is *not* an existing account.
        // Checking for .lastTotalProfits == 0 is sufficient since
        //   .lastTotalProfits == 0 implies .profitShare == 0,
        //   .lastTotalProfits == 0 implies .balance == 0.
        require(accounts[_newAddress].lastTotalProfits == 0);
        updateProfitShare(_oldAddress);

        accounts[_newAddress] = accounts[_oldAddress];
        delete accounts[_oldAddress];

        KeyRecovered(_oldAddress, _newAddress);
    }

    /// @dev Balance of
    /// @param _investor An Ethereum address
    /// @return A positive number
    function balanceOf(address _investor) public view returns (uint) {
        return accounts[_investor].balance;
    }

    /// @dev Allowance
    /// @param _investor An Ethereum address
    /// @param _spender An Ethereum address
    /// @return A positive number
    function allowance(address _investor, address _spender) public view returns (uint) {
        return allowances[_investor][_spender];
    }

    /// @dev Approve
    /// @param _spender An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function approve(address _spender, uint _value)
        public
        onlyWhitelisted(msg.sender)
        notMinting
        returns (bool)
    {
        allowances[msg.sender][_spender] = _value;

        Approval(msg.sender, _spender, _value);

        return true;
    }

    /// @dev Transfer
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function transfer(address _to, uint _value)
        public
        onlyWhitelisted(msg.sender)
        onlyWhitelisted(_to)
        notMinting
        returns (bool)
    {
        require(_to != address(0));
        require(_value <= accounts[msg.sender].balance);

        updateProfitShare(msg.sender);
        updateProfitShare(_to);

        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(_value);
        accounts[_to].balance = accounts[_to].balance.add(_value);

        Transfer(msg.sender, _to, _value);

        return true;
    }

    /// @dev Transfer from
    /// @param _from An Ethereum address
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function transferFrom(address _from, address _to, uint _value)
        public
        onlyWhitelisted(_from)
        onlyWhitelisted(_to)
        notMinting
        returns (bool)
    {
        require(_to != address(0));
        require(_value <= accounts[_from].balance);
        require(_value <= allowances[_from][msg.sender]);

        updateProfitShare(_from);
        updateProfitShare(_to);

        accounts[_from].balance = accounts[_from].balance.sub(_value);
        accounts[_to].balance = accounts[_to].balance.add(_value);

        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);

        Transfer(_from, _to, _value);

        return true;
    }

}
