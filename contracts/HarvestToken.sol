pragma solidity ^0.4.20;

import "./MintableToken.sol";
import "./KeyRecoverable.sol";
import "./Whitelisted.sol";


/// @title HarvestToken
/// @author Autogenerated from a Dia UML diagram
contract HarvestToken is MintableToken, KeyRecoverable, Whitelisted {

    mapping(address => mapping(address => uint)) public allowances;

    /// @dev Constructor
    /// @param _whitelist An Ethereum address
    /// @param _keyRecoverer An Ethereum address
    function HarvestToken(address _whitelist, address _keyRecoverer) public
        KeyRecoverable(_keyRecoverer)
        Whitelisted(_whitelist)
    {
    }

    /// @dev Recover key
    /// @param _oldInvestor An Ethereum address
    function recoverKey(address _oldAddress, address _newAddress) public
        onlyKeyRecoverer
        isWhitelisted(_oldAddress)
        isWhitelisted(_newAddress)
    {
        // Ensure the new address is not an existing account.
        // .lastTotalProfits == 0 implies .profitShare == 0
        // .lastTotalProfits == 0 implies .balance == 0
        require(accounts[_newAddress].lastTotalProfits == 0);
        updateProfitShare(_oldAddress);

        accounts[_newAddress] = accounts[_oldAddress];
        delete accounts[_oldAddress];
        KeyRecovered(_oldAddress, _newAddress);
    }


    // @dev Total supply
    // @return A positive number
    //function totalSupply() view returns (uint) {
    //    return totalSupply;
    //}

    /// @dev Balance of
    /// @param _investor An Ethereum address
    /// @return A positive number
    function balanceOf(address _investor) public view returns (uint) {
        return accounts[_investor].balance;
    }

    /// @dev Allowance
    /// @param _investor An Ethereum address
    /// @param _spender An Ethereum address
    /// @return A positive number
    function allowance(address _investor, address _spender) view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Approve
    /// @param _spender An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function approve(address _spender, uint _value) onlyWhitelisted notMinting returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Transfer
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function transfer(address _to, uint _value) onlyWhitelisted notMinting returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Transfer from
    /// @param _from An Ethereum address
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function transferFrom(address _from, address _to, uint _value) onlyWhitelisted notMinting returns (bool) {
        require(IMPLEMENTATION);
    }

}
