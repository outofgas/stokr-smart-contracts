pragma solidity 0.4.24;

import "./ProfitSharing.sol";
import "./Whitelisted.sol";


/// @title MintableToken
/// @author Autogenerated from a Dia UML diagram
/// @dev A mintable token is a token that can be minted
contract MintableToken is ERC20, ProfitSharing, Whitelisted {

    address public minter;
    uint public numberOfInvestors = 0;

    /// @dev Log entry on mint
    /// @param to An Ethereum address
    /// @param amount A positive number
    event Minted(address to, uint amount);

    /// @dev Log entry on mint finished
    event MintFinished();

    /// @dev Ensure only minter
    modifier onlyMinter() {
        require(msg.sender == minter);
        _;
    }

    /// @dev Ensure can mint
    modifier canMint() {
        require(!totalSupplyIsFixed);
        _;
    }

    /// @dev Ensure not minting
    modifier notMinting() {
        require(totalSupplyIsFixed);
        _;
    }

    /// @dev Set minter
    /// @param _minter An Ethereum address
    function setMinter(address _minter) public onlyOwner {
        require(minter == address(0x0), "Minter may only be set once.");
        require(_minter != address(0x0), "Minter address must not be zero.");

        minter = _minter;
    }

    /// @dev Mint
    /// @param _to An Ethereum address
    /// @param _amount A positive number
    function mint(address _to, uint _amount) public onlyMinter canMint onlyWhitelisted(_to) {
        if (accounts[_to].balance == 0) {
            numberOfInvestors++;
        }

        totalSupply_ = totalSupply_.add(_amount);
        accounts[_to].balance = accounts[_to].balance.add(_amount);

        emit Minted(_to, _amount);
        emit Transfer(address(0x0), _to, _amount);
    }

    /// @dev Finish minting
    function finishMinting() public onlyMinter canMint {
        totalSupplyIsFixed = true;

        emit MintFinished();
    }

    /// @dev Minting finished
    /// @return True or false
    function mintingFinished() public view returns (bool) {
        return totalSupplyIsFixed;
    }

}

