pragma solidity 0.4.24;

import "Ownable.sol";


/// @title KeyRecoverer
/// @author Autogenerated from a Dia UML diagram
contract KeyRecoverer is Ownable {

    mapping(address => uint) public indices;
    address[] public tokens;

    /// @dev Constructor
    constructor() public {
        require(IMPLEMENTATION);
    }

    /// @dev Contains token
    /// @param _token An Ethereum address
    /// @return True or false
    function containsToken(address _token) public view returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Add token
    /// @param _token An Ethereum address
    function addToken(address _token) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Remove token
    /// @param _token An Ethereum address
    function removeToken(address _token) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Recover key
    /// @param _oldAddress An Ethereum address
    /// @param _newAddress An Ethereum address
    function recoverKey(address _oldAddress, address _newAddress) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Check tokens
    /// @return True or false
    function checkTokens() public view onlyOwner returns (bool) {
        require(IMPLEMENTATION);
    }

}

