pragma solidity 0.4.24;

import "RefundableCrowdsale.sol";
import "./StokrToken.sol";


/// @title StokrCrowdsale
/// @author Autogenerated from a Dia UML diagram
contract StokrCrowdsale is RefundableCrowdsale {

    uint public tokenCap;
    uint public tokenRemaining;
    address public teamAccount;
    uint public teamShare;

    /// @dev Log entry on token distribution
    /// @param beneficiary An Ethereum address
    /// @param amount A positive number
    event TokenDistribution(address beneficiary, uint amount);

    /// @dev Log entry on rate changed
    /// @param oldRate A positive number
    /// @param newRate A positive number
    event RateChanged(uint oldRate, uint newRate);

    /// @dev Constructor
    /// @param _token A StokrToken
    /// @param _tokenCap A positive number
    /// @param _tokenGoal A positive number
    /// @param _openingTime A positive number
    /// @param _closingTime A positive number
    /// @param _rate A positive number
    /// @param _teamShare A positive number
    /// @param _wallet An Ethereum address
    constructor(StokrToken _token, uint _tokenCap, uint _tokenGoal, uint _openingTime, uint _closingTime, uint _rate, uint _teamShare, address _wallet) public RefundableCrowdsale(_goal) CappedCrowdsale(_cap) TimedCrowdsale(_openingTime,_closingTime) Crowdsale(_rate,_wallet,_token) {
        require(IMPLEMENTATION);
    }

    /// @dev Distribute tokens
    /// @param _accounts A list where each entry is an Ethereum address
    /// @param _amounts A list where each entry is a positive number
    function distributeTokens(address[] _accounts, uint[] _amounts) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set rate
    /// @param _newRate A positive number
    function setRate(uint _newRate) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set team account
    /// @param _teamAccount onlyOwner
    function setTeamAccount(address _teamAccount) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Remaining time
    /// @return A positive number
    function remainingTime() public view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Goal reached
    /// @return True or false
    function goalReached() public view returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Deliver tokens
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Finalization
    function finalization() internal {
        require(IMPLEMENTATION);
    }

}

