pragma solidity 0.4.23;

import "Ownable.sol";


/// @title ProfitSharing
/// @author Autogenerated from a Dia UML diagram
contract ProfitSharing is Ownable {

    struct InvestorAccount {
        uint balance;
        uint lastTotalProfits;
        uint profitShare;
    }

    mapping(address => InvestorAccount) public accounts;
    address public profitDepositor;
    uint public totalProfits;
    bool public totalSupplyIsFixed;
    uint internal totalSuppy_;

    /// @dev Log entry on profit depositor changed
    /// @param newProfitDepositor An Ethereum address
    event ProfitDepositorChanged(address newProfitDepositor);

    /// @dev Log entry on profit deposited
    /// @param depositor An Ethereum address
    /// @param amount A positive number
    event ProfitDeposited(address depositor, uint amount);

    /// @dev Log entry on profit share updated
    /// @param investor An Ethereum address
    /// @param amount A positive number
    event ProfitShareUpdated(address investor, uint amount);

    /// @dev Log entry on profit withdrawal
    /// @param investor An Ethereum address
    /// @param amount A positive number
    event ProfitWithdrawal(address investor, uint amount);

    /// @dev Ensure only profit depositor
    modifier onlyProfitDepositor() {
        require(IMPLEMENTATION);
        _;
    }

    /// @dev Constructor
    /// @param _profitDepositor An Ethereum address
    constructor(address _profitDepositor) public {
        require(IMPLEMENTATION);
    }

    /// @dev Set profit depositor
    /// @param _newProfitDepositor An Ethereum address
    function _setProfitDepositor(address _newProfitDepositor) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Deposit profit
    function depositProfit() public payable onlyProfitDepositor {
        require(IMPLEMENTATION);
    }

    /// @dev Profit share owing
    /// @param _investor An Ethereum address
    /// @return A positive number
    function profitShareOwing(address _investor) public view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Update profit share
    /// @param _investor An Ethereum address
    function updateProfitShare(address _investor) public {
        require(IMPLEMENTATION);
    }

    /// @dev Withdraw profit share
    function withdrawProfitShare() public {
        require(IMPLEMENTATION);
    }

}

