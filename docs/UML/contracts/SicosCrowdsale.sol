pragma solidity 0.4.23;

import "RefundableCrowdsale.sol";
import "CappedCrowdsale.sol";
import "./MintableToken.sol";


/// @title SicosCrowdsale
/// @author Autogenerated from a Dia UML diagram
contract SicosCrowdsale is RefundableCrowdsale, CappedCrowdsale {

    address public teamAccount;
    uint public teamShare;

    /// @dev Log entry on rate changed
    /// @param oldRate A positive number
    /// @param newRate A positive number
    event RateChanged(uint oldRate, uint newRate);

    /// @dev Constructor
    /// @param _token A MintableToken
    /// @param _openingTime A positive number
    /// @param _closingTime A positive number
    /// @param _goal A positive number
    /// @param _rate A positive number
    /// @param _cap A positive number
    /// @param _teamShare A positive number
    /// @param _wallet An Ethereum address
    constructor(MintableToken _token, uint _openingTime, uint _closingTime, uint _goal, uint _rate, uint _cap, uint _teamShare, address _wallet) public RefundableCrowdsale(_goal) CappedCrowdsale(_cap) TimedCrowdsale(_openingTime,_closingTime) Crowdsale(_rate,_wallet,_token) {
        require(IMPLEMENTATION);
    }

    /// @dev Set rate
    /// @param _newRate A positive number
    function setRate(uint _newRate) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Set team account
    /// @param _teamAccount onlyOwner
    function setTeamAccount(address _teamAccount) public {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _weiAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Deliver tokens
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Finalization
    function finalization() internal {
        require(IMPLEMENTATION);
    }

}

