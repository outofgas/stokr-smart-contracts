pragma solidity 0.4.19;

import "FinalizableCrowdsale.sol";
import "CappedCrowdsale.sol";
import "./MintableToken.sol";


/// @title SicosCrowdsale
/// @author Autogenerated from a Dia UML diagram
contract SicosCrowdsale is FinalizableCrowdsale, CappedCrowdsale {

    /// @dev Constructor
    /// @param _token A MintableToken
    /// @param _startTime A positive number
    /// @param _endTime A positive number
    /// @param _rate A positive number
    /// @param _cap A positive number
    /// @param _wallet An Ethereum address
    function SicosCrowdsale(MintableToken _token, uint _startTime, uint _endTime, uint _rate, uint _cap, address _wallet) public {
        require(IMPLEMENTATION);
    }

    /// @dev Set rate
    /// @param _newRate A positive number
    function setRate(uint _newRate) public onlyOwner {
        require(IMPLEMENTATION);
    }

    /// @dev Pre validate purchase
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _preValidatePurchase(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Deliver tokens
    /// @param _beneficiary An Ethereum address
    /// @param _tokenAmount A positive number
    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {
        require(IMPLEMENTATION);
    }

    /// @dev Finalization
    function finalization() internal {
        require(IMPLEMENTATION);
    }

}

