pragma solidity 0.4.19;

import "./MintableToken.sol";
import "./KeyRecoverable.sol";


/// @title SicosToken
/// @author Autogenerated from a Dia UML diagram
contract SicosToken is MintableToken, KeyRecoverable {

    mapping(address => mapping(address => uint)) internal allowance_;

    /// @dev Whitelisted(_whitelist)
    /// @dev ProfitSharing(_profitDepositor)
    /// @dev KeyRecoverable(_keyRecoverer)
    /// @param _whitelist An Ethereum address
    /// @param _profitDepositor An Ethereum address
    /// @param _keyRecoverer An Ethereum address
    function SicosToken(address _whitelist, address _profitDepositor, address _keyRecoverer) public {
        require(IMPLEMENTATION);
    }

    /// @dev Recover key
    /// @param _oldAddress An Ethereum address
    /// @param _newAddress An Ethereum address
    function recoverKey(address _oldAddress, address _newAddress) public onlyKeyRecoverer onlyWhitelisted(_oldAddress) onlyWhitelisted(_newAddress) {
        require(IMPLEMENTATION);
    }

    /// @dev Total supply
    /// @return A positive number
    function totalSupply() public view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Balance of
    /// @param _investor An Ethereum address
    /// @return A positive number
    function balanceOf(address _investor) public view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Allowance
    /// @param _investor An Ethereum address
    /// @param _spender An Ethereum address
    /// @return A positive number
    function allowance(address _investor, address _spender) public view returns (uint) {
        require(IMPLEMENTATION);
    }

    /// @dev Approve
    /// @param _spender An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function approve(address _spender, uint _value) public onlyWhitelisted(msg.sender) notMinting returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Transfer
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function transfer(address _to, uint _value) public onlyWhitelisted(msg.sender) onlyWhitelisted(_to) notMinting returns (bool) {
        require(IMPLEMENTATION);
    }

    /// @dev Transfer from
    /// @param _from An Ethereum address
    /// @param _to An Ethereum address
    /// @param _value A positive number
    /// @return True or false
    function transferFrom(address _from, address _to, uint _value) public onlyWhitelisted(_from) onlyWhitelisted(_to) notMinting returns (bool) {
        require(IMPLEMENTATION);
    }

}

